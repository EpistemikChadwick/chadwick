<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
]>

<book id="chadwick">
  <bookinfo>
    <title>Chadwick</title>
    <subtitle>Software for Baseball Game Scoring and Record-Keeping</subtitle>
    <author>
      <firstname>Theodore</firstname>
      <surname>Turocy</surname>
    </author>
    <edition>Version 0.3.1</edition>
    <pubdate>March 2005</pubdate>
    <copyright>
      <year>2005</year>
      <holder>Theodore Turocy</holder>
    </copyright>
  </bookinfo>

<chapter id="intro">
    <title>Introduction</title>
    <para>
Chadwick is an Open Source Software project dedicated to making
available a quality suite of tools for use in baseball scorekeeping and
statistics collection.
</para>

    <sect1 id="intro.why">
      <title>Why does Chadwick exist?</title>

      <para>If one takes the writings of Eric S. Raymond literally,
then Chadwick exists because I needed to scratch an itch, which in
my case was the need to be able to very efficiently scan Retrosheet
files to extract actual future runs scored from a variety of
game situations.  The <application>bevent</application> program 
which DiamondWare generously has licensed for use on Retrosheet data
is not convenient for doing this, since even after extracting the
data, I would either need to write my own program to read in the output
and analyze it, or use a database.  In the former case, I would still
be doing a decent amount of work to get to the point I needed to;
in the latter case, attempts to write efficient queries over the
whole of the Retrosheet data set (running around 20 seasons at this
writing) were, to put it mildly, inefficient.</para>

      <para>In the 1980s, after the ancestor of this scoring notation
was first described in one of Bill James' Abstracts at the dawn of
Project Scoresheet, I wrote some simple BASIC code which parsed a
stripped-down version of the notation and generated statistics from it.
Later on, after some computer science training, I understood the
beauty of the notation, which is that all allowable play codes can be
parsed by only looking at the next character in the string (called
an LL grammar).  So, I knew just how to go about writing code to parse
the notation on my own.</para>

      <para>Finally, as I was going to set out to write some of my own
code, I looked around and realized that not infrequently, someone would
post to the Retrosheet mailing list asking about the availability
of input tools to create Retrosheet-style files for scorekeeping and
statistics gathering, or about the availability of more modern (that is,
non-command-line) tools for extracting information from Retrosheet files,
or about the availability of tools to run natively on operating systems
other than Windows.  Some interpid souls have produced programs which
act as front ends for the DiamondWare tools, or which use processed output
from them as input into a customized database program.  Both approaches
definitely took some effort, yet still are quite kludgy.  Being able to
incorporate the ability to read, parse, and write the actual Retrosheet
files within an application remained impossible, since the DiamondWare
engine is proprietary.</para>

      <para>So, as I wrote my application, I wrote new code that 
manipulates Retrosheet files, and it is this code that forms the
basis of Chadwick.  This toolset and programs built on it focus on
the DiamondWare/Retrosheet notation, both because it is an efficient
and elegant way of recording what occurs on a baseball play, and because
the existence of the DiamondWare tools provides an excellent standard.
The DiamondWare tools are stable and time-tested, and, to use the
metaphor, are excellent taillights to chase at the start of this project.
</para>

      <para>Currently, Chadwick still mostly provides replacements for
DiamondWare tools, plus small companion utilities, like the
<application>cwsub</application> program to report on player substitutions,
that fill in gaps in the DiamondWare tools.  As the library matures,
it is an ideal candidate for inclusion in more elaborate programs to
enter, edit, and analyze baseball games graphically, in scorebook and
statistics reporting applications.</para>

      <para>This is where <emphasis>you</emphasis> come
in: the project is looking for individuals interested in helping to
design and code such an application, using the library as a core.
There are many scorekeeping applications available; I've tried a number
of them, and found them all lacking.  I believe there's quite a 
sizeable niche available for a well-designed Open Source scorekeeping
application.</para>

      <para>For now, welcome.  I hope you will find Chadwick useful
in its current state, and encourage you to contribute to the project,
by contributing code if you can, or at least by contributing bug reports and
feature suggestions.</para>

      </sect1>

    <sect1 id="intro.objectives">
      <title>Current objectives of the project</title>

    <para>
To operationalize the overall goal of Chadwick, the project has the
following objectives:
<orderedlist>
	  <listitem>
	    <para>To provide a portable library of Open Source code
            which permits the
	    representation of the events in a baseball game;</para>
	  </listitem>
	  <listitem>
	    <para>To read, write, and manipulate events coded in the
            Project Scoresheet / DiamondWare / Retrosheet notation;</para>
	    </listitem>
	  <listitem>
	    <para>To implement Open Source alternatives to the DiamondWare
            tools <application>bevent</application> and 
            <application>bgame</application>
            available on the Retrosheet website, matching their interface
            and output as closely as possible</para>
	    </listitem>
</orderedlist>
</para>
</sect1>

<sect1 id="intro.contacting">
<title>Contacting the developers</title>
<para>
Chadwick's homepage is hosted by SourceForge, and can be found at
http://chadwick.sourceforge.net.
</para>
</sect1>

<sect1 id="intro.about">
<title>About this documentation</title>
<para>
This documentation is a work in progress, and is updated regularly
on the Chadwick website.  Some sections are currently obviously
missing or under construction.  We appreciate your patience while
we get this together.
</para>
</sect1>

<sect1 id="intro.thanks">
<title>Acknowledgements</title>
<para>
The Chadwick project does not have the endorsement of anyone but
its authors.  However, we'd like to thank everyone involved in the
creation of the scoring notation and file format.  In particular,
we extend a special thanks to David Smith of Retrosheet, who in
his always gracious manner quickly and thoroughly answered several
questions regarding the notation and Retrosheet &quot;preferred
style&quot;.
</para>

<para>
There are many places in this documentation which refer to bugs in
other software tools.  These should in no way be construed as being
derogatory to those tools or their authors.  In fact, the
Chadwick project has a large advantage in being able to, as the saying
goes, &quot;chase taillights&quot;, and we are most grateful for having
such wonderful taillights to chase.  Almost every bug in those tools noted
in this
documentation is, in truth, trivial, and the vast majority are probably
not of crucial interest to most people.
</para>
</sect1>

  </chapter>

<chapter id="gui">
<title>The Chadwick graphical interface</title>

<para>
The graphical interface is the program of interest for most users.
This is intended to be a full-fledged baseball scorebook and
statkeeping application.
</para>

<para>
While it is still in an early stage of development, the graphical
interface is already sufficient for many statkeeping tasks. 
Future development will include additional reporting features,
pitch-by-pitch entry, and some graphical helpers for entering
unusual or difficult plays.  Users are encouraged to submit
suggestions and ideas for enhancements to make the tool more
useful.
</para>

<note>
<para>
Note that while the program is fairly stable, it is still in
an early stage of development, and there may be as-yet undiscovered
bugs.  You are strongly encouraged to follow good practices and
back up your data frequently!
</para>
</note>

<sect1 id="gui.files">
<title>Getting started: Chadwick &quot;scorebook&quot; files</title

<para>
Chadwick files are referred to as &quot;scorebooks&quot; and
typically have the extension <filename>.chw</filename>.  A scorebook
is intended to comprise a group of related games in one season --
usually a league or conference, or a similar grouping.
</para>

<para>
The title bar of the Chadwick window will advise you of the location
of the current scorebook file you're working on, and also will
let you know if you have any unsaved changes.  You'll also be
warned if you try to close the program with any pending unsaved
changes.
</para>

<para>
A new scorebook can be created from scratch using the
<guimenuitem>New</guimenuitem> item on the <guimenu>File</guimenu>
menu.  You will be prompted to enter the year in which the games
are played.
</para>

<para>
Chadwick scorebooks are internally fully compatible with the
ZIP files of league play-by-play distributed by Retrosheet
(http://www.retrosheet.org).  A good way to get a
&quot;quick start&quot; in using Chadwick is to grab one of these
ZIP files from the Retrosheet site and load it into Chadwick.
Scorebooks are opened using the <guimenuitem>Open</guimenuitem>
item on the <guimenu>File</guimenu> menu.  This dialog defaults
to looking for files with the <filename>.chw</filename>
extension, but there's a dropdown menu at the bottom that will
switch it to looking for files with the <filename>.zip</filename> 
extension.
</para>

<note>
<para>
If you want to use Chadwick to view the Retrosheet data, always
use the full-season ZIP files Retrosheet provides, and not the
ones for individual teams.  If you grab one of the individual
team ZIP files, Chadwick will only recognize the team's home
games.  Also, make sure you grab the Retrosheet event files, which have
names like <filename>1980nl.zip</filename> for the 1980 National
League, and not the &quot;game log&quot; files which have names
beginning with <filename>gl</filename>.
</para>
</note>

<para>
As noted in the introduction, you are encouraged to save your
scorebooks often, just in case.  The <guimenuitem>Save</guimenuitem>
item on the <guimenu>File</guimenu> menu will save the scorebook
to the same location from which it was loaded.  To save a copy
to a different location, use the <guimenuitem>Save as</guimenuitem>
item on the <guimenu>File</guimenu> menu instead.
</para>

<note>
<para>
When you use the <guimenuitem>Save</guimenuitem> command to save
a scorebook, if a previous copy of the scorebook exists with that name,
that copy is renamed to the filename plus a tilde (~) to server as
a backup.
</para>
</note>

</sect1>

<sect1 id="gui.playersteams">
<title>Players and teams</title>

<para>
Chadwick maintains a list of teams and players which appear in
the scorebook.  This section describes how to add new teams
and players to the database.
</para>

<note>
<para>
In this version there is no provision for deleting teams or players
once they are defined. By and large, having unused teams or players
in the scorebook is harmless.
</para>
</note>


<sect2 id="gui.playersteams.teams">
<title>Editing teams</title>

<para>
Chadwick presents a list of all teams present in the current
scorebook on the Teams tab.  A button labeled &quot;Create
new team&quot; calls up a dialog box to add a new team.  
</para>

<para>
Each team requires an ID that is unique within the scorebook.
(The Retrosheet custom is to assign a three-letter ID.)
The dialog checks that the ID is not blank, and does not conflict
with any other IDs defined in the scorebook.  When a valid
ID has not been provided, the <guilabel>OK</guilabel> button is
disabled and the team ID is highlighted in pink.
</para>

<para>
You may also assign a
one-letter League ID to the team; this is currently only presented
in the Teams tab for human consumption, and is not used anywhere
else.
</para>

<para>
Once created, team information (other than the team ID) may be
edited by double-clicking the team's row entry.  The editing 
dialog shows a list of players currently listed as being on that
team's roster, as well as a list of all players in the scorebook.
A player not on the team's roster may be added by clicking on the
player's entry in the list of all players.  Players on the team's
roster are indicated in blue; players not on the team's roster
are indicated in black.  A player who has been selected to be added
to the team's roster appears in the team roster in green.  Note that
players are only added to the roster if changes to the roster are
accepted using the <guilabel>OK</guilabel> button.
</para>

</sect2>

<sect2 id="gui.playersteams.players">
<title>Editing players</title>

<para>
Chadwick presents a list of all players listed in the current
scorebook on the Players tab.  A button labeled &quot;Create
new player&quot; calls up a dialog box to add a new player to the
list.  Note that each player must be assigned to at least one team.  (Therefore,
one should create teams prior to beginning to create players.)
</para>

<para>
Permitted player names may use uppercase and lowercase letters, as well
as spaces and apostrophes.  The first name and last name input fields
do not accept other characters, and any leading and trailing spaces
are ignored.
</para>

<para>
Each player requires an ID, unique within the scorebook.
You may either give the player an ID by hand, or have Chadwick generate
one for you.  The Chadwick-generated IDs match the Retrosheet conventions.
These are eight characters long, with the first four being the first four
letters of the player's last name (if the player's last name is less than
four letters, the last name is padded with dashes), followed by the
first letter of the player's first name,following by three digits.
These are generated starting at &quot;001&quot;, and incremented if
another player whose ID shares the first five letters is already
present in the scorebook.  If the ID currently entered in this field
is blank or invalid, the field is displayed with a pink highlight,
and the <guilabel>OK</guilabel> button is disabled.
</para>

</sect2>

</sect1>

<sect1 id="gui.games">
<title>Games in the scorebook</title>

<para>
The Games tab of the main Chadwick window shows a list of all the
games in the current scorebook.  
</para>

<para>
A boxscore and game narrative (play-by-play) for any game can be
generated by double-clicking on the game's row in the grid.
These plain-text reports appear in a dialog, and can be copy-and-pasted into
a word processor or text editor for subsequent processing or printing.
</para>

<para>
Games in the scorebook are presented in chronological order, with
the earliest games first.  If two games were played by the same
team on the same date, they are distinguished by the text
&quot;(G1)&quot; and &quot;(G2)&quot; appended to the <guilabel>Date</guilabel>
field.
</para>

<sect2 id="gui.games.filter">
<title>Filtering games</title>

<para>
By default, all games in a scorebook are shown.  On the toolbar above the
game grid is a drop-down box listing all the teams in the scorebook.  Selecting
a team in the list restricts the view only to games played by that team.
Selecting the first item in the list, &quot;All teams,&quot; restores the view
to showing all games by all teams.
</para>

</sect2>

</sect1>

<sect1 id="gui.newgame">
<title>Inputting games</title>

<para>
On the Games tab of the main Chadwick window is a button labeled
&quot;Enter new game&quot;  This button launches the Chadwick
game editor to input a new game.
</para>

<sect2 id="gui.newgame.setup">
<title>Setting up a new game</title>

<para>
A sequence of three dialogs,
described in the following sections, sets up the game. 
Clicking <guilabel>Cancel</guilabel> in any of these dialogs 
aborts the process of creating a new game.
</para>

<sect3 id="gui.newgame.teams">
<title>Selecting the teams</title>

<para>
The first dialog selects the participating teams from those
defined in the scorebook, and the date the game was played.
If more than one game was played between the teams on a day,
they should be distinguished by indicating &quot;First game&quot;
or &quot;Second game&quot; in the <guilabel>Game number</guilabel>
field.
</para>

</sect3>

<sect3 id="gui.newgame.lineups">
<title>Selecting lineups</title>

<para>
Starting lineups are input first for the visiting team, then
for the home team.  The lineup selection dialog validates the lineup to
confirm that no player is listed twice in the lineup, and that all fielding
positions are filled by a player.  The <guilabel>OK</guilabel> button
remains disabled when the lineup is not valid.
</para>

<para>
If the team has played at least one game already present in the scorebook,
Chadwick initializes the team's lineup to the lineup the team used in the
game played most recently before the date of the current game.  Since often
lineups do not change greatly from game to game, this provides a useful
starting point for efficiently setting the team's lineup.
</para>

<para>
To enter a lineup in which a team uses the designated hitter, select
&quot;dh&quot; as the position for a player in the batting order.  Whenever
a player is listed as designated hitter in the lineup, an additional slot
is shown at the bottom of the lineup to specify the starting pitcher.
</para>

</sect3>

</sect2>

<sect2 id="gui.newgame.playbyplay">
<title>Entering the play-by-play</title>

<para>
Events - plays, substitutions, and so forth - are input in the order in
which they occur in the game.  The game entry window
displays the current state of the game for reference.  This includes lineups
for both teams, with the next (or current) batter for each team highlighted
in black.  A linescore with runs, hits, errors, runners left on base,
and double plays is provided, along with the current inning, number of
outs, and any runners currently on base. Note that the left on base total
quoted includes any runners currently on base for a team.
</para>

<para>
Note also that the game entry window features &quot;live&quot; boxscore
and play-by-play (&quot;narrative&quot;) windows, selectable by tabs
with those names at the top of the window.  These can also be
helpful in making sure you've got everything input correctly.
</para>

<para>
Plays are entered in the field labeled &quot;Play text.&quot;
Plays are described using the Retrosheet notation; see the documentation
in the &quot;Event files&quot; section of the Retrosheet website
(http://www.retrosheet.org) for details on this notation.
The &quot;Play text&quot; field is highlighted in pink if the 
current contents of the field do not form a valid play description.
When the play description is valid, the play is added to the game
by simply hitting the Enter key; the window updates the state of the
game based on the play that just occurred, the &quot;Play text&quot;
field is cleared, and Chadwick is ready for the next event.
</para>

<note>
<para>
The validation of play descriptions is currently primitive.  The
validation errs on the side of permissiveness; it may accept plays
that make no sense given the current situation (such as allowing a
runner to &quot;disappear&quot; if no advancement is specified for him).
The philosophy is that if the program has a bug that doesn't accept
a play descriptor that it should, the user's stuck; but, invalid input
can be corrected by the user. Hence, the program errs on the side of 
caution for now.
Future iterations of the program will tighten up the validation to
help avoid invalid input in the first place.
</para>
</note>

<para>
Offensive substitutions are specified using the &quot;Pinch hit&quot;
and &quot;Pinch run&quot; buttons.  These buttons are located in the
section of the window showing the current baserunners, each located next to the
player for whom the substitute is intended.
</para>

<para>
Defensive substitutions are entered using the &quot;Defensive
substitution&quot; button.  This brings up a dialog which permits
multiple simultaneous changes (e.g., double-switches).
Note that when a team has an invalid defensive alignment (after
pinch-hitting or pinch-running in the previous half inning), the
&quot;Play text&quot; field is disabled until valid changes are input using
this dialog.
</para>

<para>
Plays can be undone one at a time by clicking the 
&quot;Undo last play&quot; button.  Note that each undo operation
removes the last play, including any intervening substitutions.
</para>

<para>
Game-level information about the current game is edited using the
&quot;Edit game information&quot; button.  This creates a dialog
for editing the general information about the game which can
be stored in a Retrosheet game file, including parameters
for weather, umpires, attendance, and so forth.
</para>

<para>
At any point in the game, free-form commments can be interjected using
the &quot;Insert comment&quot; button.  Comments are generally one line
(80 characters or less), and cover notes or unusual events in the
game.  For longer comments, it is suggested to use several shorter 
comments in a row (to preserve compatibility with other tools).
These comments appear in the game narratives generated by Chadwick
at the point at which they are inserted.
</para>

</sect2>

<sect2 id="gui.newgame.save">
<title>Saving the game to the scorebook</title>

<para>
The &quot;Save game and exit&quot; button ends the entry process.
If the game is not a tie, a dialog appears prompting the awarding of
decisions (win, loss, save) to the appropriate pitchers.
Since the rules for awarding these has varied over history, Chadwick
makes no particular assumptions about which pitchers may be
awarded which decisions (other than the winning and saving pitchers
must come from the winning team, and the losing pitcher from the losing
team).  The exception is that the field for specifying a save will
be disabled if the winning team used only one pitcher.
</para>

<para>
After decisions dialog is dismissed (or, if the game was a tie),
the editor screen is closed, and the game is stored in the scorebook.
Remember that scorebooks are only saved to disk when the
<guimenuitem>Save</guimenuitem> or <guimenuitem>Save as</guimenuitem>
commands are used.
</para>

<para>
Closing the game editor window using the close button (usually located
at the top-right of the window's frame in most environments) closes the
game without saving it to the scorebook; therefore, all work on the
game will be lost.  Chadwick will ask for confirmation of this action before
the window is closed.
</para>

</sect2>

</sect1>

<sect1 id="gui.reporting">
<title>Reporting features</title>

<para>
This version contains some primitive reporting features.  Reports
come in a few groups.
</para>

<para>
Registers are complete listings of all players' statistics.
Three registers are available: batting, pitching, and fielding.
</para>

<para>
Team-level statistics.  &quot;Totals&quot; compiles aggregate club
batting, pitching, and fielding, as well as won-lost records.
&quot;Batting&quot; and &quot;Pitching&quot;
compile player statistics organized by team.  &quot;Game logs&quot;
compile a list of all teams' games played, including scores and
decisions for pitchers. 
 </para>

<para>
Events: lists of events.  As a current sample, a list of all
grand slams in the scorebook is available, as well as a listing of
all multi-HR game and four-hit games by batters, and games with more
than ten strikeouts by pitchers.
</para>

<para>
These are intended as some prelimiary features.  Other functionality
can be imagined: splits, sabermetric data, restricting reports
to time frames.  The reports are currently plain-text, and can
be cut-and-pasted into other programs for further processing:
formatted output is a future possibility for Chadwick.  
</para>

<note>
<para>
Development of future reports will be user-request driven: please
send in your requests for enhancements in this area!
</para>
</note>

</sect1>

</chapter>


<chapter id="cwtools">
    <title>Command-line tools</title>
    <para>Chadwick provides the following command-line programs for
extracting information from Retrosheet play-by-play event files:
<itemizedlist>
	<listitem>
	  <para><application>cwevent</application>, an expanded event
          descriptor, which is intended to replace a similarly-named
          program available from the Retrosheet website.</para>
        </listitem>
	<listitem>
	  <para><application>cwgame</application>, a game information
          extractor, which is intended to replace a similarly-named
          program available from the Retrosheet website.</para>
	</listitem>
	<listitem>
	  <para><application>cwsub</application>, which extracts information
          about in-game player substitutions.  This program is unique
          to Chadwick.</para>
	</listitem>
</itemizedlist>
Each tool is documented separately in its own section below; the
command-line options common to the tools are described in their
own section afterwards.
</para>

    <sect1 id="cwtools.cwevent">
      <title>cwevent: Expanded event descriptor</title>

      <para><application>cwevent</application> is a command-line tool
      which extracts detailed information about individual events (plays)
      in the data file.  There are 97 possible fields which 
      <application>cwevent</application> can output for each play; these
      are listed below, and are specified using the -f flag.
      </para>

      <table>
	<title>Field numbers for <application>cwevent</application></title>
	<tgroup cols='2'>
	  <thead>
	    <row><entry>Field number</entry><entry>Description</entry></row>
	    </thead>

	  <tbody>
	    <row><entry>0</entry><entry>Game ID</entry></row>
	    <row><entry>1</entry><entry>Visiting team</entry></row>
	    <row><entry>2</entry><entry>Inning</entry></row>
	    <row><entry>3</entry><entry>Batting team</entry></row>
	    <row><entry>4</entry><entry>Outs</entry></row>
	    <row><entry>5</entry><entry>Balls</entry></row>
	    <row><entry>6</entry><entry>Strikes</entry></row>
	    <row><entry>7</entry><entry>Pitch sequence</entry></row>
	    <row><entry>8</entry><entry>Visitor score</entry></row>
	    <row><entry>9</entry><entry>Home score</entry></row>
	    <row><entry>10</entry><entry>Batter (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>11</entry><entry>Batter hand (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>12</entry><entry>Result batter (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>13</entry><entry>Result batter hand (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>14</entry><entry>Pitcher (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>15</entry><entry>Pitcher hand (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>16</entry><entry>Result pitcher (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>17</entry><entry>Result pitcher hand (see <xref linkend="cwtools.cwevent.resplayers">)</entry></row>
	    <row><entry>18</entry><entry>Catcher</entry></row>
	    <row><entry>19</entry><entry>First baseman</entry></row>
	    <row><entry>20</entry><entry>Second baseman</entry></row>
	    <row><entry>21</entry><entry>Third baseman</entry></row>
	    <row><entry>22</entry><entry>Shortstop</entry></row>
	    <row><entry>23</entry><entry>Left fielder</entry></row>
	    <row><entry>24</entry><entry>Center fielder</entry></row>
	    <row><entry>25</entry><entry>Right fielder</entry></row>
	    <row><entry>26</entry><entry>Runner on first</entry></row>
	    <row><entry>27</entry><entry>Runner on second</entry></row>
	    <row><entry>28</entry><entry>Runner on third</entry></row>
	    <row><entry>29</entry><entry>Event text</entry></row>
	    <row><entry>30</entry><entry>Leadoff flag</entry></row>
	    <row><entry>31</entry><entry>Pinch-hit flag (see <xref linkend="cwtools.cwevent.phflag">)</entry></row>
	    <row><entry>32</entry><entry>Defensive position</entry></row>
	    <row><entry>33</entry><entry>Lineup position</entry></row>
	    <row><entry>34</entry><entry>Event type (see <xref linkend="cwtools.cwevent.eventtype">)</entry></row>
	    <row><entry>35</entry><entry>Batter event flag</entry></row>
	    <row><entry>36</entry><entry>Official time at bat flag (see <xref linkend="cwtools.cwevent.sacflags">)</entry></row>
	    <row><entry>37</entry><entry>Hit value</entry></row>
	    <row><entry>38</entry><entry>Sacrifice hit flag (see <xref linkend="cwtools.cwevent.sacflags">)</entry></row>
	    <row><entry>39</entry><entry>Sacrifice fly flag (see <xref linkend="cwtools.cwevent.sacflags">)</entry></row>
	    <row><entry>40</entry><entry>Outs on play</entry></row>
	    <row><entry>41</entry><entry>Double play flag</entry></row>
	    <row><entry>42</entry><entry>Triple play flag</entry></row>
	    <row><entry>43</entry><entry>RBI on play</entry></row>
	    <row><entry>44</entry><entry>Wild pitch flag</entry></row>
	    <row><entry>45</entry><entry>Passed ball flag</entry></row>
	    <row><entry>46</entry><entry>Fielded by</entry></row>
	    <row><entry>47</entry><entry>Batted ball type</entry></row>
	    <row><entry>48</entry><entry>Bunt flag</entry></row>
	    <row><entry>49</entry><entry>Foul flag</entry></row>
	    <row><entry>50</entry><entry>Hit location</entry></row>
	    <row><entry>51</entry><entry>Number of errors (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>52</entry><entry>1st error player (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>53</entry><entry>1st error type (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>54</entry><entry>2nd error player (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>55</entry><entry>2nd error type (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>56</entry><entry>3rd error player (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>57</entry><entry>3rd error type (see <xref linkend="cwtools.cwevent.errors">)</entry></row>
	    <row><entry>58</entry><entry>Batter destination (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>59</entry><entry>Runner on first destination (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>60</entry><entry>Runner on second destination (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>61</entry><entry>Runner on third destination (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>62</entry><entry>Play on batter (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>63</entry><entry>Play on runner on first (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>64</entry><entry>Play on runner on second (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>65</entry><entry>Play on runner on third (see <xref linkend="cwtools.cwevent.plays">)</entry></row>
	    <row><entry>66</entry><entry>Stolen base for runner on first</entry></row>
	    <row><entry>67</entry><entry>Stolen base for runner on second</entry></row>
	    <row><entry>68</entry><entry>Stolen base for runner on third</entry></row>
	    <row><entry>69</entry><entry>Caught stealing for runner on first</entry></row>
	    <row><entry>70</entry><entry>Caught stealing for runner on second</entry></row>
	    <row><entry>71</entry><entry>Caught stealing for runner on third</entry></row>
	    <row><entry>72</entry><entry>Pickoff of runner on first</entry></row>
	    <row><entry>73</entry><entry>Pickoff of runner on second</entry></row>
	    <row><entry>74</entry><entry>Pickoff of runner on third</entry></row>
	    <row><entry>75</entry><entry>Pitcher charged with runner on first</entry></row>
	    <row><entry>76</entry><entry>Pitcher charged with runner on second</entry></row>
	    <row><entry>77</entry><entry>Pitcher charged with runner on third</entry></row>
	    <row><entry>78</entry><entry>New game flag</entry></row>
	    <row><entry>79</entry><entry>End game flag</entry></row>
	    <row><entry>80</entry><entry>Pinch-runner on first</entry></row>
	    <row><entry>81</entry><entry>Pinch-runner on second</entry></row>
	    <row><entry>82</entry><entry>Pinch-runner on third</entry></row>
	    <row><entry>83</entry><entry>Runner removed for pinch-runner on first</entry></row>
	    <row><entry>84</entry><entry>Runner removed for pinch-runner on second</entry></row>
	    <row><entry>85</entry><entry>Runner removed for pinch-runner on third</entry></row>
	    <row><entry>86</entry><entry>Batter removed for pinch-hitter</entry></row>
	    <row><entry>87</entry><entry>Position of batter removed for pinch-hitter</entry></row>
	    <row><entry>88</entry><entry>Fielder with first putout (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>89</entry><entry>Fielder with second putout (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>90</entry><entry>Fielder with third putout (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>91</entry><entry>Fielder with first assist (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>92</entry><entry>Fielder with second assist (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>93</entry><entry>Fielder with third assist (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>94</entry><entry>Fielder with fourth assist (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>95</entry><entry>Fielder with fifth assist (see <xref linkend="cwtools.cwevent.fielding">)</entry></row>
	    <row><entry>96</entry><entry>Event number</entry></row>
	    </tbody>
	  </tgroup>
	</table>

      <sect2 id="cwtools.cwevent.resplayers">
	<title>Result batters and pitchers (fields 10-17)</title>

	<para>In most cases, the pitcher and batter charged or credited
with the event (when a batter event) are the ones in the game when the
event occurs.  However, Rules 10.17 and 10.18 have special clauses 
discussing how to charge walks to pitchers when a relief pitcher enters
in the middle of the plate appearance, and how to charge strikeouts
to batters when a pinch hitter enters in the middle of the plate appearance.
The <literal>batter</literal> and <literal>pitcher</literal> fields always
give the identity of the batter and pitcher in the game at the time of the
event; the <literal>result batter</literal> and <literal>result pitcher</literal> give the batter and pitcher credited or charged with the event.</para>

	<para>There is one known bug in the Retrosheet-provided tools
regarding the result pitcher.  When a relief pitcher enters the game, and
then the next batter is retired on a fielder's choice, the pitcher
responsible for the runner put out is shown in the <literal>result
pitcher</literal> field.  While it is correct that the batter reaching base
in this case would be charged to the former pitcher should he score, the
purpose of the <literal>result pitcher</literal> field is to indicate the
pitcher charged with the outcome of this particular event.  In this case,
for example, the relief pitcher is awarded one-third of an inning pitched;
therefore, he should be the <literal>result pitcher</literal>, and then
the previous pitcher should be (and is) listed in the <literal>responsible
pitcher</literal> field for the batter in subsequent events.</para>

	<para>In the case of switch-hitters, the <literal>batter hand</literal>
and <literal>result batter hand</literal> fields are set to 
<literal>L</literal> or <literal>R</literal>, as appropriate, based upon
the hand with which the pitcher throws.  If the pitcher's throwing hand
is unknown, or if the batter's batting hand is unknown, a question mark 
appears in these fields.</para>

	</sect2>

      <sect2 id="cwtools.cwevent.phflag">
	<title>Pinch-hit flag (field 31)</title>

	<para>This field is <literal>T</literal> if the batter is a
pinch-hitter, and <literal>F</literal> if he is not.  For the purposes
of this field, Chadwick differs from the Retrosheet-provided tools
in that, should a pinch-hitter bat a second time in an inning because
his team has batted around, this field is <literal>F</literal> for his
second and subsequent apperances at the plate.  Implementing this field
this way makes sense, since those subsequent appearances are not
technically considered &quot;pinch-hitting&quot; appearances in statistics.
Furthermore, there is no real loss, since one can always check whether
the <literal>defensive position</literal> field (field 32) is equal to 11.
</para>

	</sect2>

      <sect2 id="cwtools.cwevent.eventtype">
	<title>Event type code (field 34)</title>

	<para>All plays are categorized by their primary event type.
Here is a list of all types and the corresponding codes used in this
field.</para>

      <table>
	<title>Primary event type codes</title>
	<tgroup cols='2'>
	  <thead>
	    <row><entry>Code</entry><entry>Primary event</entry></row>
	    </thead>

	  <tbody>
	    <row><entry>0</entry><entry>Unknown (should not appear)</entry></row>
	    <row><entry>1</entry><entry>None (should not appear)</entry></row>
	    <row><entry>2</entry><entry>Generic out</entry></row>
	    <row><entry>3</entry><entry>Strikeout</entry></row>
	    <row><entry>4</entry><entry>Stolen base</entry></row>
	    <row><entry>5</entry><entry>Defensive indifference</entry></row>
	    <row><entry>6</entry><entry>Caught stealing</entry></row>
	    <row><entry>7</entry><entry>Pickoff error</entry></row>
	    <row><entry>8</entry><entry>Pickoff</entry></row>
	    <row><entry>9</entry><entry>Wild pitch</entry></row>
	    <row><entry>10</entry><entry>Passed ball</entry></row>
	    <row><entry>11</entry><entry>Balk</entry></row>
	    <row><entry>12</entry><entry>Other advance (out advancing)</entry></row>
	    <row><entry>13</entry><entry>Foul error</entry></row>
	    <row><entry>14</entry><entry>Walk</entry></row>
	    <row><entry>15</entry><entry>Intentional walk</entry></row>
	    <row><entry>16</entry><entry>Hit by pitch</entry></row>
	    <row><entry>17</entry><entry>Interference</entry></row>
	    <row><entry>18</entry><entry>Error</entry></row>
	    <row><entry>19</entry><entry>Fielder's choice</entry></row>
	    <row><entry>20</entry><entry>Single</entry></row>
	    <row><entry>21</entry><entry>Double</entry></row>
	    <row><entry>22</entry><entry>Triple</entry></row>
	    <row><entry>23</entry><entry>Home run</entry></row>
	    <row><entry>24</entry><entry>Missing play</entry></row>
	    </tbody>
	  </tgroup>
	</table>


	</sect2>

      <sect2 id="cwtools.cwevent.sacflags">
	<title>Sacrifice flags and eras (fields 36, 38, 39)</title>

	<para>Chadwick in all cases applies the modern rules concerning
the awarding of sacrifice hits, sacrifice flies, and official times at
bat, regardless of the year indicated with the -y flag.</para>

	</sect2>

      <sect2 id="cwtools.cwevent.plays">
	<title>Plays on runners (fields 58-65)</title>

	<para>Fields 58 through 65 give the eventual destination of
all runners, including the batter, as well as the fielding play made
on them, if any.  For the purposes of the destination fields, a code
of 5 indicates the runner scored, and is charged as unearned, and a code
of 6 indicates the runner scored, and is charged as unearned to the team,
but earned to the pitcher.  Note that these codes only appear when
the <literal>(NR)</literal> or <literal>(TUR)</literal> modifiers are
explicitly used on the advancement code; there is no internal logic in
Chadwick to ferret out which runs should be earned or unearned, as in many
cases there is insufficient information, or the situation requires the
judgment of the official scorer.  Runners which are put out are reported
as having an advancement of 0.</para>

	<para>In most cases, the play on a runner indicates the fielding
credits involved in putting him out.  Chadwick also reports a fielding
play on a runner when the runner is safe on a dropped throw, such as
<literal>3E1</literal> or <literal>FC6.1X2(6E4)</literal>.</para>
	</sect2>
      
      <sect2 id="cwtools.cwevent.errors">
	<title>Fielding errors (fields 51-57)</title>

	<para>Up to three errors can be indicated in <application>cwevent</application> output.  Supported error types are <literal>F</literal> for generic fielding errors, and <literal>T</literal> for throwing errors; no distinction
is made between bobbled batted balls, muffed throws or fly balls, and so forth.</para>

	<para>Known bugs in these fields corrected by Chadwick are:
<itemizedlist>
<listitem><para>On catcher's interference plays scored as 
<literal>C</literal>, as opposed to the preferred
<literal>C/E2</literal>, the Retrosheet-provided tools do not charge an
error to the catcher.</para></listitem>
<listitem><para>On some advancement plays, the Retrosheet-provided tools
give a putout to a fielder who muffs a throw, rather than an assist.
Example: For <literal>1X2(3E6)</literal>, in some cases, the Retrosheet-provided
tools give the shortstop a putout and not an error.  Chadwick correctly 
charges the shortstop with an error (and gives the first baseman an
assist).</para></listitem>
</itemizedlist>

</para>
</sect2>

      <sect2 id="cwtools.cwevent.fielding">
	<title>Fielding credits (fields 88-95)</title>

	<para>Most of the known bugs in the tools available on the
Retrosheet website deal with correctly assigning fielding credits on plays. 
These are irrelevant or trivial for most applications, but effort has been made to correctly implement the scoring rules for fielding credits in Chadwick.</para>

<itemizedlist>
<listitem><para>On strikeout plays with the play on the batter listed
in the baserunning section, the Retrosheet-provided tools give a
putout to the catcher, instead of assigning credit for the actual
play.  Example: <literal>K.BX1(23)</literal>: Chadwick awards the
catcher an assist and the first baseman a putout.  (Presumably,
<literal>K23</literal> would be preferred for this, but there can be
cases like <literal>K+WP.BX2(26)</literal> where the advancement is
important.)
</para>
</listitem>

<listitem><para>On long rundown plays, Chadwick awards all assists
as appropriate; in some cases, the Retrosheet-provided tools only issue
up to four assists.</para></listitem>

<listitem><para>On rundown plays that end in an error, Chadwick does not
give a putout to the player who made the error, as the Retrosheet-provided
tools do.</para></listitem>

<listitem><para>Chadwick gives assists to players on dropped-throw primary
events.  Example: <literal>3E1</literal>: Chadwick gives an assist to the
first baseman; the Retrosheet-provided tools do not.</para></listitem>

<listitem><para>Chadwick treats the question mark (<literal>?</literal>) as
a missing fielder placeholder.  This is, in fact, a deprecated usage,
as the question mark now is used instead to indicate a questionable play,
and preferred style is to invent fielding credit and leave a comment in
the file.  Example: <literal>4?</literal>, in the new style, would indicate
a pop fly caught by the second baseman, perhaps after some difficulty;
in the old usage, this would indicate a play on which the second baseman
got an assist, and an unknown player got the putout.  This is one instance
where Chadwick implements the old style instead of the preferred new style,
since almost all, if not all, plays with question marks in Retrosheet
released files are of the old style.  Therefore, Chadwick gives the
second baseman an assist (and nobody a putout) on <literal>4?</literal>,
whereas the Retrosheet-provided tools give the second baseman a putout,
reflecting the new-style convention.</para>
<important>
<para>It is likely that future versions of Chadwick will switch to the
new-style convention, with the old-style convention available via a flag.
</para>
</important>
</listitem>
</itemizedlist>

<para>Also worth noting is that in certain rare cases, the order in
which Chadwick and the Retrosheet-provided tools list putouts and assists
may vary.  The number of plays on which this occurs is quite few, and
generally in cases where there is a putout in the primary event as well
as one in the baserunning modifiers.  The words &quot;first&quot;,
&quot;second&quot; and so on do not necessarily indicate chronological
order of the credits, though in most cases they do.</para>

	</sect2>

      </sect1>

    <sect1 id="cwtools.cwgame">
      <title>cwgame: Game information extractor</title>
      
      <para><application>cwgame</application> reports game-level information for each game.</para>

      <para>There are only two known sources of discrepancies between
<application>cwgame</application> and its counterpart application on
the Retrosheet website:
<itemizedlist>
<listitem><para>Chadwick correctly handles catcher's intereference when it
is coded as a bare <literal>C</literal>, instead of the preferred
<literal>C/E2</literal>.  Therefore, in games where this occurs,
<application>cwgame</application> reports the correct number of errors.
</para></listitem>
<listitem><para>The maximum field number for both programs is 81; however,
the default behavor (when the -f flag is not specified) for the
Retrosheet-provided program is to output only fields 0 through 80.
<application>cwgame</application> prints all fields by default
</para></listitem>
</itemizedlist>
</para>

      <para>The following table gives the contents of each of the 82 fields
<application>cwgame</application> outputs.</para>

      <table>
	<title>Field numbers for <application>cwgame</application></title>
	<tgroup cols='2'>
	  <thead>
	    <row><entry>Field number</entry><entry>Description</entry></row>
	    </thead>

	  <tbody>
	    <row><entry>0</entry><entry>Game ID</entry></row>
	    <row><entry>1</entry><entry>Date</entry></row>
	    <row><entry>2</entry><entry>Game number</entry></row>
	    <row><entry>3</entry><entry>Day of week</entry></row>
	    <row><entry>4</entry><entry>Start time</entry></row>
	    <row><entry>5</entry><entry>DH used flag</entry></row>
	    <row><entry>6</entry><entry>Day/night flag</entry></row>
	    <row><entry>7</entry><entry>Visiting team</entry></row>
	    <row><entry>8</entry><entry>Home team</entry></row>
	    <row><entry>9</entry><entry>Game site</entry></row>
	    <row><entry>10</entry><entry>Visitors starting pitcher</entry></row>
	    <row><entry>11</entry><entry>Home starting pitcher</entry></row>
	    <row><entry>12</entry><entry>Home plate umpire</entry></row>
	    <row><entry>13</entry><entry>First base umpire</entry></row>
	    <row><entry>14</entry><entry>Second base umpire</entry></row>
	    <row><entry>15</entry><entry>Third base umpire</entry></row>
	    <row><entry>16</entry><entry>Left field umpire</entry></row>
	    <row><entry>17</entry><entry>Right field umpire</entry></row>
	    <row><entry>18</entry><entry>Attendance</entry></row>
	    <row><entry>19</entry><entry>PS scorer</entry></row>
	    <row><entry>20</entry><entry>Translator</entry></row>
	    <row><entry>21</entry><entry>Inputter</entry></row>
	    <row><entry>22</entry><entry>Input time</entry></row>
	    <row><entry>23</entry><entry>Edit time</entry></row>
	    <row><entry>24</entry><entry>How scored</entry></row>
	    <row><entry>25</entry><entry>Pitches entered</entry></row>
	    <row><entry>26</entry><entry>Temperature</entry></row>
	    <row><entry>27</entry><entry>Wind direction</entry></row>
	    <row><entry>28</entry><entry>Wind speed</entry></row>
	    <row><entry>29</entry><entry>Field condition</entry></row>
	    <row><entry>30</entry><entry>Precipitation</entry></row>
	    <row><entry>31</entry><entry>Sky</entry></row>
	    <row><entry>32</entry><entry>Time of game</entry></row>
	    <row><entry>33</entry><entry>Number of innings</entry></row>
	    <row><entry>34</entry><entry>Visitor final score</entry></row>
	    <row><entry>35</entry><entry>Home final score</entry></row>
	    <row><entry>36</entry><entry>Visitor hits</entry></row>
	    <row><entry>37</entry><entry>Home hits</entry></row>
	    <row><entry>38</entry><entry>Visitor errors</entry></row>
	    <row><entry>39</entry><entry>Home errors</entry></row>
	    <row><entry>40</entry><entry>Visitor left on base</entry></row>
	    <row><entry>41</entry><entry>Home left on base</entry></row>
	    <row><entry>42</entry><entry>Winning pitcher</entry></row>
	    <row><entry>43</entry><entry>Losing pitcher</entry></row>
	    <row><entry>44</entry><entry>Save</entry></row>
	    <row><entry>45</entry><entry>Game-winning RBI</entry></row>
	    <row><entry>46</entry><entry>Visitor batter 1</entry></row>
	    <row><entry>47</entry><entry>Visitor batter 1 position</entry></row>
	    <row><entry>48</entry><entry>Visitor batter 2</entry></row>
	    <row><entry>49</entry><entry>Visitor batter 2 position</entry></row>
	    <row><entry>50</entry><entry>Visitor batter 3</entry></row>
	    <row><entry>51</entry><entry>Visitor batter 3 position</entry></row>
	    <row><entry>52</entry><entry>Visitor batter 4</entry></row>
	    <row><entry>53</entry><entry>Visitor batter 4 position</entry></row>
	    <row><entry>54</entry><entry>Visitor batter 5</entry></row>
	    <row><entry>55</entry><entry>Visitor batter 5 position</entry></row>
	    <row><entry>56</entry><entry>Visitor batter 6</entry></row>
	    <row><entry>57</entry><entry>Visitor batter 6 position</entry></row>
	    <row><entry>58</entry><entry>Visitor batter 7</entry></row>
	    <row><entry>59</entry><entry>Visitor batter 7 position</entry></row>
	    <row><entry>60</entry><entry>Visitor batter 8</entry></row>
	    <row><entry>61</entry><entry>Visitor batter 8 position</entry></row>
	    <row><entry>62</entry><entry>Visitor batter 9</entry></row>
	    <row><entry>63</entry><entry>Visitor batter 9 position</entry></row>
	    <row><entry>64</entry><entry>Home batter 1</entry></row>
	    <row><entry>65</entry><entry>Home batter 1 position</entry></row>
	    <row><entry>66</entry><entry>Home batter 2</entry></row>
	    <row><entry>67</entry><entry>Home batter 2 position</entry></row>
	    <row><entry>68</entry><entry>Home batter 3</entry></row>
	    <row><entry>69</entry><entry>Home batter 3 position</entry></row>
	    <row><entry>70</entry><entry>Home batter 4</entry></row>
	    <row><entry>71</entry><entry>Home batter 4 position</entry></row>
	    <row><entry>72</entry><entry>Home batter 5</entry></row>
	    <row><entry>73</entry><entry>Home batter 5 position</entry></row>
	    <row><entry>74</entry><entry>Home batter 6</entry></row>
	    <row><entry>75</entry><entry>Home batter 6 position</entry></row>
	    <row><entry>76</entry><entry>Home batter 7</entry></row>
	    <row><entry>77</entry><entry>Home batter 7 position</entry></row>
	    <row><entry>78</entry><entry>Home batter 8</entry></row>
	    <row><entry>79</entry><entry>Home batter 8 position</entry></row>
	    <row><entry>80</entry><entry>Home batter 9</entry></row>
	    <row><entry>81</entry><entry>Home batter 9 position</entry></row>
	    </tbody>
	  </tgroup>
	</table>

      </sect1>

    <sect1 id="cwtools.cwsub">
      <title>cwsub: Player substitution descriptor</title>

      <para><application>cwsub</application> extracts information about in-game player substitutions.  It is designed to be used in conjunction with <application>cwevent</application> to mitigate a blind spot in the existing tools.
Since there is no corresponding standard application, <application>cwsub</application> may still contain some bugs; please especially report any problems or questions you might have about how this program operates.</para>

      <para><application>cwsub</application> outputs up to ten pieces of information about each substitution.  All are included by default; which ones are generated is controlled by the -f switch.</para>

      <table>
	<title>Field numbers for <application>cwsub</application></title>
	<tgroup cols='2'>
	  <thead>
	    <row><entry>Field number</entry><entry>Description</entry></row>
	    </thead>

	  <tbody>
	    <row><entry>0</entry><entry>Game ID</entry></row>
	    <row><entry>1</entry><entry>Inning</entry></row>
	    <row><entry>2</entry><entry>Batting team</entry></row>
	    <row><entry>3</entry><entry>Substitute</entry></row>
	    <row><entry>4</entry><entry>Team</entry></row>
	    <row><entry>5</entry><entry>Lineup position</entry></row>
	    <row><entry>6</entry><entry>Fielding position</entry></row>
	    <row><entry>7</entry><entry>Removed player</entry></row>
	    <row><entry>8</entry><entry>Position of removed player</entry></row>
	    <row><entry>9</entry><entry>Event number</entry></row>
	    </tbody>
	  </tgroup>
	</table>

      </sect1>

    <sect1 id="cwtools.cmdline">
      <title>Command-line options</title>
      <para>Each of the command-line tools shares a common set of
options controlling their behavior.  These are detailed in the 
following table.</para>

      <table>
	<title>Common command-line options and their effects</title>
	<tgroup cols='2'>
	  <thead>
	    <row><entry>Switch</entry><entry>Description</entry></row>
	    </thead>

	  <tbody>
	    <row>
	    <entry><option>-a</option></entry>
            <entry>Generate ASCII comma-delimited files (default)</entry>
            </row>
	    <row>
	    <entry><option>-d</option></entry>
            <entry>Print a list of the available fields and descriptions (for use with <option>-f</option>.</entry>
            </row>
	    <row>
	    <entry><option>-e</option> <parameter>mmdd</parameter></entry>
            <entry>The latest date to process (inclusive).</entry>
            </row>
	    <row>
	    <entry><option>-f</option> <parameter>flist</parameter></entry>
            <entry>List of fields to output.  The default list can be
viewed with <option>-h</option>; the list of available fields can be
viewed with <option>-d</option>.</entry>
            </row>
	    <row>
	    <entry><option>-ft</option></entry>
            <entry>Generate FORTRAN format files.  (Note: this is less
            tested in Chadwick than the ASCII version.  Please report any
            problems you might encounter.)</entry>
            </row>
	    <row>
	    <entry><option>-h</option></entry>
	    <entry>Prints description and usage information for the tool.</entry>
            </row>
            <row>
            <entry><option>-i</option> <parameter>gameid</parameter></entry>
            <entry>Only process the game with ID <parameter>gameid</parameter>.</entry>
	    </row>
	    <row>
	    <entry><option>-s</option> <parameter>mmdd</parameter></entry>
            <entry>The earliest date to process (inclusive).</entry>
            </row>
	    <row>
	    <entry><option>-y</option></entry>
            <entry>Specifies the year to use (four digits).  This is currently required; hopefully future versions can intelligently discern the year from the input files.</entry>
            </row>
	    </tbody>
	  </tgroup>
	</table>

      </sect1>

  </chapter>

<chapter id="api">
<title>The Chadwick Library</title>

<para>
This chapter documents the API for the underlying library itself.
This library can read, write, and manipulate files in the Retrosheet
format.
</para>

<para>
The internals of the library are currently designed with the
explicit purpose of reading and writing Retrosheet notation files.
In the future, these may evolve to more general-purpose play-by-play
representations.
</para>

    <sect1 id="api.book">
      <title><type>CWScorebook</type> -- A collection of games</title>

<para>
A <type>CWScorebook</type> is a collection of games.  In Retrosheet
terms, a <type>CWScorebook</type> can be used to read, write, and
manipulate an individual event file (generally
<filename>*.EVA</filename> or <filename>*.EVN</filename> in released
files).
</para>

<para>
Internally, a <type>CWScorebook</type> contains two linked lists.
A linked list of <type>CWComment</type> stores comment records that
appear before the first game in the file.  These are used by
Retrosheet for copyright and related information about the file.
A linked list of <type>CWGame</type> stores the games themselves.
</para>

<sect2 id="api.book.lifecycle">
	<title>Creating and destroying</title>

<funcsynopsis>
<funcprototype><funcdef>CWScorebook *<function>cw_scorebook_create</function></funcdef>
<paramdef>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Allocates an initializes a new empty scorebook.
Caller is responsible for maintaining returned pointer.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_scorebook_cleanup</function></funcdef>
<paramdef>
<parameter>CWScorebook *scorebook</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Cleans up internal memory allocation associated with
<parameter>scorebook</parameter>.
Caller is responsible for freeing <parameter>scorebook</parameter>.
</para>

</sect2>

      <sect2 id="api.book.io">
	<title>Reading and writing</title>

<funcsynopsis>
<funcprototype><funcdef>int <function>cw_scorebook_read</function></funcdef>
<paramdef>
<parameter>CWScorebook *scorebook</parameter>
<parameter>char *path</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Reads the contents of the scorebook file in filename <parameter>path</parameter>
into the scorebook <parameter>scorebook</parameter>  Returns the number
of games successfully read, or -1 if the file could not be opened.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_scorebook_write</function></funcdef>
<paramdef>
<parameter>CWScorebook *scorebook</parameter>
<parameter>FILE *file</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Writes the contents of <parameter>scorebook</parameter> to
<parameter>file</parameter>.
</para>

</sect2>

      <sect2 id="api.book.games">
	<title>Manipulating games</title>

<funcsynopsis>
<funcprototype><funcdef>int <function>cw_scorebook_append_game</function></funcdef>
<paramdef>
<parameter>CWScorebook *scorebook</parameter>
<parameter>CWGame *game</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Appends <parameter>game</parameter> to <parameter>scorebook</parameter>.
Returns nonzero if successful, 0 if unsuccessful.  (Failure occurs,
for example, if <parameter>game</parameter> is null.)
After a successful append, <parameter>scorebook</parameter> is responsible
for the memory associated with <parameter>game</parameter>.
</para>
	
<funcsynopsis>
<funcprototype><funcdef>int <function>cw_scorebook_remove_game</function></funcdef>
<paramdef>
<parameter>CWScorebook *scorebook</parameter>
<parameter>char *game_id</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Removes the game with game ID <parameter>game_id</parameter> from
<parameter>scorebook</parameter>.  If no game with that ID is present,
no action is taken.
</para>

</sect2>


      </sect1>

    <sect1 id="api.file">
      <title>file</title>

      <para>

      </para>
      </sect1>
    
    <sect1 id="api.game">
      <title><type>CWGame</type> -- Play-by-play for a game</title>

      <para>
      The <type>CWGame</type> datatype contains the play-by-play and other
information for a game.  Lists of <type>CWGame</type>s are often kept in a
<type>CWScorebook</type>.
      </para>

<sect2 id="api.game.lifecycle">
	<title>Creating and destroying</title>

<funcsynopsis>
<funcprototype><funcdef>CWGame *<function>cw_game_create</function></funcdef>
<paramdef>
<parameter>char *game_id</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Allocates an initializes a new game with id <parameter>game_id</parameter>.
Caller is responsible for maintaining returned pointer.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_cleanup</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Cleans up internal memory allocation associated with 
<parameter>game</parameter>.  Caller is responsible for freeing the
<type>CWGame</type> itself.
</para>

</sect2>

      <sect2 id="api.game.io">
	<title>Reading and writing</title>

<funcsynopsis>
<funcprototype><funcdef>CWGame *<function>cw_game_read</function></funcdef>
<paramdef>
<parameter>FILE *file</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Creates a game by reading from a file; returns a null pointer if
read is unsuccessful.  (This function is useful primarily for the
<type>CWScorebook</type> implementation and is probably not generally
useful for user code.)
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_write</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>FILE *file</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Writes the <parameter>game</parameter> to <parameter>file</parameter>
in Retrosheet format.
</para>
</sect2>

      <sect2 id="api.game.info">
	<title>General game information</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_set_version</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *version</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Sets the version number (for file format and game notation)
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_info_append</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *label</parameter>
<parameter>char *data</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Add an info record to the game.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_info_set</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *label</parameter>
<parameter>char *data</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Modify an existing info record in the game.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_info_lookup</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *label</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Scans the info records for <parameter>label</parameter>
and returns the associated data.
The pointer returned is internal to the <type>CWGame</type> structure, so it
should not be deleted, nor its contents changed.
The list is scanned from the tail first, to return the last seen
record in the case of multiple records; this is particularly useful in
the case of multiple edit date records.
</para>

</sect2>

      <sect2 id="api.game.starters">
	<title>The starting lineup</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_starter_append</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *player_id</parameter>
<parameter>char *name</parameter>
<parameter>int team</parameter>
<parameter>int slot</parameter>
<parameter>int pos</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Adds a new start record to the game.
</para>

<funcsynopsis>
<funcprototype><funcdef>CWAppearance *<function>cw_game_starter_find</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>int team</parameter>
<parameter>int slot</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Returns the appearance record for the starter for <parameter>team</parameter>
in batting order position <parameter>slot</parameter>.
</para>

<funcsynopsis>
<funcprototype><funcdef>CWAppearance *<function>cw_game_starter_find_by_position</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>int team</parameter>
<parameter>int pos</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Returns the appearance record for the starter for <parameter>team</parameter>
at position <parameter>pos</parameter>.
</para>

</sect2>

      <sect2 id="api.game.event">
	<title>Play-by-play events</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_event_append</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>int inning</parameter>
<parameter>int halfInning</parameter>
<parameter>char *batter</parameter>
<parameter>char *count</parameter>
<parameter>char *pitches</parameter>
<parameter>char *event_text</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Adds an event record to the game.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_truncate</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>CWEvent *event</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Truncate a game, by deleting event records beginning with 
<parameter>event</parameter>.
</para>

</sect2>

      <sect2 id="api.game.sub">
	<title>Substitutions</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_substitute_append</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *playerID</parameter>
<parameter>char *name</parameter>
<parameter>int team</parameter>
<parameter>int slot</parameter>
<parameter>int pos</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Add a substitute record to the game
</para>

</sect2>

      <sect2 id="api.game.data">
	<title>Data lines</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_data_append</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>int num_data</parameter>
<parameter>char **data</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Add a data record to the game.
</para>

</sect2>

      <sect2 id="api.game.comment">
	<title>Comment lines</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_game_comment_append</function></funcdef>
<paramdef>
<parameter>CWGame *game</parameter>
<parameter>char *comment</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Add a comment record to the game.
</para>

</sect2>
      </sect1>

    <sect1 id="api.gameiter">
      <title><type>CWGameIterator</type> -- Keeping track of the state of a game</title>

      <para>

      </para>
      </sect1>

    <sect1 id="api.league">
      <title><type>CWLeague</type> -- League definition file</title>

      <para>
      A <type>CWLeague</type> represents a collection of <type>CWRoster</type>, mapping roughly to the files named <filename>TEAMyyyy</filename> in Retrosheet data.
      </para>

      <para>
      Internally, a <type>CWLeague</type> is just a linked list of 
      <type>CWRoster</type>s.
      </para>

      <sect2 id="api.league.lifecycle">
	<title>Creating and destroying</title>

<funcsynopsis>
<funcprototype><funcdef>CWLeague *<function>cw_league_create</function></funcdef>
<paramdef>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Allocates and initializes a new <type>CWLeague</type> structure.
Caller is responsible for memory management of the created pointer.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_league_cleanup</function></funcdef>
<paramdef>
<parameter>CWLeague *league</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Cleans up internal memory associated with <parameter>league</parameter>.
Caller is responsible for freeing the <parameter>league</parameter> 
pointer itself.
</para>

</sect2>	

      <sect2 id="api.league.io">
	<title>Reading and writing</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_league_read</function></funcdef>
<paramdef>
<parameter>CWLeague *league</parameter>
<parameter>FILE *file</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Read a leaguefile (in Retrosheet convention, <filename>TEAMyyyy</filename>)
from the stream <parameter>file</parameter>.  Rosters are created for
each team, but are left empty.
</para>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_league_write</function></funcdef>
<paramdef>
<parameter>CWLeague *league</parameter>
<parameter>FILE *file</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Write a leaguefile (in Retrosheet convention, <filename>TEAMyyyy</filename>)
to the stream <parameter>file</parameter>.
</para>

</sect2>

      <sect2 id="api.league.rosters">
	<title>Roster manipulation</title>

<funcsynopsis>
<funcprototype><funcdef>void <function>cw_league_roster_append</function></funcdef>
<paramdef>
<parameter>CWLeague *league</parameter>
<parameter>CWRoster *roster</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Append <parameter>roster</parameter> to the league.  The 
<parameter>league</parameter> takes responsibility for the memory
allocated to pointer <parameter>roster</parameter>.
</para>

<funcsynopsis>
<funcprototype><funcdef>CWRoster *<function>cw_league_roster_find</function></funcdef>
<paramdef>
<parameter>CWLeague *league</parameter>
<parameter>char *team</parameter>
</paramdef>
</funcprototype>
</funcsynopsis>
<para>
Returns a pointer to the roster of the team with ID
<parameter>team</parameter>.  The Retrosheet convention is for
<parameter>team</parameter> to be three characters long, but
longer or shorter IDs are accepted by the library.
</para>

</sect2>

      </sect1>

    <sect1 id="api.parse">
      <title>parse</title>

      <para>

      </para>
      </sect1>

    <sect1 id="api.roster">
      <title><type>CWRoster</type> -- Team rosters</title>

      <para>

      </para>
      </sect1>

    </chapter>

</book>
